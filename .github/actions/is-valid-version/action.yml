# This workflow is a good candidate for a reusable composite action that can be used by
# ANY of our repos that use semantic versioned releases. In order to make it reusable,
# we need to move it to a separate repo. Any repo that uses this must either pass in
# the library version as an input, or it will need to have the `project.version` file.
#
# See https://docs.github.com/en/actions/creating-actions/creating-a-composite-action

name: Is Valid Version

description: |
  If the project/library version is not a snapshot version, checks whether the project
  version is greater than the most recent release in GitHub.

inputs:
  project_version:
    description: The semantic version of the project.
    required: true
  repo:
    description: The source repo in 'org/repo-name' form
    required: true
  fail_if_invalid:
    description: Whether the action should fail if the conditions are not met.
    required: false
    default: 'false'

outputs:
  is_valid:
    description: Whether or not the project version is valid
    value: boolean

runs:
  using: composite
  steps:
    - name: Get latest release version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "LATEST_RELEASE_VERSION=$(gh release view -R "${{  }}" --json tagName --jq '.tagName')" >> $GITHUB_ENV
    - name: Compare the library version with the latest release version
      # TODO: Replace this with a stricter check that the library version is one of the three
      # possible subsequent versions. E.g. if latest version is 1.2.3, then library version
      # should be one of 1.2.4, 1.3.0, or 2.0.0
      id: compare-latest-release
      uses: popematt/compare-semvers@v1
      with:
        first: ${{ input.project_version }}
        second: ${{ env.LATEST_RELEASE_VERSION }}
    - name: Validate project version
      shell: bash
      run: |
        IS_VALID=true
        if [[ "${{ env.LIBRARY_VERSION }}" =~ ^\d+\.\d+.\d+$ ]]; then
          if [[ ${{ env.steps.is-greater-version.outputs.result }} != 1 ]]; then
            IS_VALID=false
          fi
        fi
        echo "is_valid=$IS_VALID" >> $GITHUB_OUTPUT
        echo "is_valid=$IS_VALID" >> $GITHUB_ENV
    - name: Exit with Error
      if: ${{ inputs.fail_if_invalid }} && !${{ env.is_valid }}
      shell: bash
      run: exit 1
